// Code generated by goa v3.2.6, DO NOT EDIT.
//
// Admin endpoints
//
// Command:
// $ goa gen sample1/design

package admin

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "Admin" service endpoints.
type Endpoints struct {
	UserNumber      goa.Endpoint
	AdminListUser   goa.Endpoint
	AdminGetUser    goa.Endpoint
	AdminCreateUser goa.Endpoint
	AdminUpdateUser goa.Endpoint
	AdminDeleteUser goa.Endpoint
}

// NewEndpoints wraps the methods of the "Admin" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		UserNumber:      NewUserNumberEndpoint(s),
		AdminListUser:   NewAdminListUserEndpoint(s),
		AdminGetUser:    NewAdminGetUserEndpoint(s),
		AdminCreateUser: NewAdminCreateUserEndpoint(s),
		AdminUpdateUser: NewAdminUpdateUserEndpoint(s),
		AdminDeleteUser: NewAdminDeleteUserEndpoint(s),
	}
}

// Use applies the given middleware to all the "Admin" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.UserNumber = m(e.UserNumber)
	e.AdminListUser = m(e.AdminListUser)
	e.AdminGetUser = m(e.AdminGetUser)
	e.AdminCreateUser = m(e.AdminCreateUser)
	e.AdminUpdateUser = m(e.AdminUpdateUser)
	e.AdminDeleteUser = m(e.AdminDeleteUser)
}

// NewUserNumberEndpoint returns an endpoint function that calls the method
// "user_number" of service "Admin".
func NewUserNumberEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		res, err := s.UserNumber(ctx)
		if err != nil {
			return nil, err
		}
		vres := NewViewedGoa3SampleAdminUserNumber(res, "default")
		return vres, nil
	}
}

// NewAdminListUserEndpoint returns an endpoint function that calls the method
// "admin list user" of service "Admin".
func NewAdminListUserEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		res, err := s.AdminListUser(ctx)
		if err != nil {
			return nil, err
		}
		vres := NewViewedGoa3SampleAdminUserCollection(res, "default")
		return vres, nil
	}
}

// NewAdminGetUserEndpoint returns an endpoint function that calls the method
// "admin get user" of service "Admin".
func NewAdminGetUserEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*GetUserPayload)
		res, err := s.AdminGetUser(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedGoa3SampleAdminUser(res, "default")
		return vres, nil
	}
}

// NewAdminCreateUserEndpoint returns an endpoint function that calls the
// method "admin create user" of service "Admin".
func NewAdminCreateUserEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*CreateUserPayload)
		return s.AdminCreateUser(ctx, p)
	}
}

// NewAdminUpdateUserEndpoint returns an endpoint function that calls the
// method "admin update user" of service "Admin".
func NewAdminUpdateUserEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*UpdateUserPayload)
		res, err := s.AdminUpdateUser(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedGoa3SampleAdminUser(res, "default")
		return vres, nil
	}
}

// NewAdminDeleteUserEndpoint returns an endpoint function that calls the
// method "admin delete user" of service "Admin".
func NewAdminDeleteUserEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*DeleteUserPayload)
		return nil, s.AdminDeleteUser(ctx, p)
	}
}
