// Code generated by goa v3.2.6, DO NOT EDIT.
//
// Admin service
//
// Command:
// $ goa gen sample1/design

package admin

import (
	"context"
	adminviews "sample1/gen/admin/views"
)

// Admin provide functions for the management screen.
type Service interface {
	// Number of users
	UserNumber(context.Context) (res *Goa2SampleAdminUserNumber, err error)
	// List all stored users
	AdminListUser(context.Context) (res Goa2SampleAdminUserCollection, err error)
	// Show user by ID
	AdminGetUser(context.Context, *GetUserPayload) (res *Goa2SampleAdminUser, err error)
	// Add new user and return its ID.
	AdminCreateUser(context.Context, *CreateUserPayload) (res string, err error)
	// Update user item.
	AdminUpdateUser(context.Context, *UpdateUserPayload) (res *Goa2SampleAdminUser, err error)
	// Delete user by id.
	AdminDeleteUser(context.Context, *DeleteUserPayload) (err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "Admin"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [6]string{"user_number", "admin list user", "admin get user", "admin create user", "admin update user", "admin delete user"}

// Goa2SampleAdminUserNumber is the result type of the Admin service
// user_number method.
type Goa2SampleAdminUserNumber struct {
	// グラフデータ
	Data []*Data
	// X軸に使用するkey
	X string
	// Y軸に使用するkey
	Y string
	// ドットの大きさに使用するkey
	Size *string
	// ドットの色分けに使用するkey
	Color *string
	Guide *StatsGuideType
}

// Goa2SampleAdminUserCollection is the result type of the Admin service admin
// list user method.
type Goa2SampleAdminUserCollection []*Goa2SampleAdminUser

// GetUserPayload is the payload type of the Admin service admin get user
// method.
type GetUserPayload struct {
	ID string
}

// Goa2SampleAdminUser is the result type of the Admin service admin get user
// method.
type Goa2SampleAdminUser struct {
	// User id
	ID string
	// Name of user
	Name string
	// Email of user
	Email     string
	CreatedAt string
	UpdatedAt string
	DeletedAt *string
}

// CreateUserPayload is the payload type of the Admin service admin create user
// method.
type CreateUserPayload struct {
	// User id
	ID string
	// Name of user
	Name string
	// Email of user
	Email string
}

// UpdateUserPayload is the payload type of the Admin service admin update user
// method.
type UpdateUserPayload struct {
	// User id
	ID string
	// Name of user
	Name *string
	// Email of user
	Email *string
}

// DeleteUserPayload is the payload type of the Admin service admin delete user
// method.
type DeleteUserPayload struct {
	ID string
}

type Data struct {
	Key   *string
	Value interface{}
}

type StatsGuideType struct {
	X *StatsLabelType
	Y *StatsLabelType
}

type StatsLabelType struct {
	Label string
}

// NewGoa2SampleAdminUserNumber initializes result type
// Goa2SampleAdminUserNumber from viewed result type Goa2SampleAdminUserNumber.
func NewGoa2SampleAdminUserNumber(vres *adminviews.Goa2SampleAdminUserNumber) *Goa2SampleAdminUserNumber {
	return newGoa2SampleAdminUserNumber(vres.Projected)
}

// NewViewedGoa2SampleAdminUserNumber initializes viewed result type
// Goa2SampleAdminUserNumber from result type Goa2SampleAdminUserNumber using
// the given view.
func NewViewedGoa2SampleAdminUserNumber(res *Goa2SampleAdminUserNumber, view string) *adminviews.Goa2SampleAdminUserNumber {
	p := newGoa2SampleAdminUserNumberView(res)
	return &adminviews.Goa2SampleAdminUserNumber{Projected: p, View: "default"}
}

// NewGoa2SampleAdminUserCollection initializes result type
// Goa2SampleAdminUserCollection from viewed result type
// Goa2SampleAdminUserCollection.
func NewGoa2SampleAdminUserCollection(vres adminviews.Goa2SampleAdminUserCollection) Goa2SampleAdminUserCollection {
	return newGoa2SampleAdminUserCollection(vres.Projected)
}

// NewViewedGoa2SampleAdminUserCollection initializes viewed result type
// Goa2SampleAdminUserCollection from result type Goa2SampleAdminUserCollection
// using the given view.
func NewViewedGoa2SampleAdminUserCollection(res Goa2SampleAdminUserCollection, view string) adminviews.Goa2SampleAdminUserCollection {
	p := newGoa2SampleAdminUserCollectionView(res)
	return adminviews.Goa2SampleAdminUserCollection{Projected: p, View: "default"}
}

// NewGoa2SampleAdminUser initializes result type Goa2SampleAdminUser from
// viewed result type Goa2SampleAdminUser.
func NewGoa2SampleAdminUser(vres *adminviews.Goa2SampleAdminUser) *Goa2SampleAdminUser {
	return newGoa2SampleAdminUser(vres.Projected)
}

// NewViewedGoa2SampleAdminUser initializes viewed result type
// Goa2SampleAdminUser from result type Goa2SampleAdminUser using the given
// view.
func NewViewedGoa2SampleAdminUser(res *Goa2SampleAdminUser, view string) *adminviews.Goa2SampleAdminUser {
	p := newGoa2SampleAdminUserView(res)
	return &adminviews.Goa2SampleAdminUser{Projected: p, View: "default"}
}

// newGoa2SampleAdminUserNumber converts projected type
// Goa2SampleAdminUserNumber to service type Goa2SampleAdminUserNumber.
func newGoa2SampleAdminUserNumber(vres *adminviews.Goa2SampleAdminUserNumberView) *Goa2SampleAdminUserNumber {
	res := &Goa2SampleAdminUserNumber{
		Size:  vres.Size,
		Color: vres.Color,
	}
	if vres.X != nil {
		res.X = *vres.X
	}
	if vres.Y != nil {
		res.Y = *vres.Y
	}
	if vres.Data != nil {
		res.Data = make([]*Data, len(vres.Data))
		for i, val := range vres.Data {
			res.Data[i] = transformAdminviewsDataViewToData(val)
		}
	}
	if vres.Guide != nil {
		res.Guide = transformAdminviewsStatsGuideTypeViewToStatsGuideType(vres.Guide)
	}
	return res
}

// newGoa2SampleAdminUserNumberView projects result type
// Goa2SampleAdminUserNumber to projected type Goa2SampleAdminUserNumberView
// using the "default" view.
func newGoa2SampleAdminUserNumberView(res *Goa2SampleAdminUserNumber) *adminviews.Goa2SampleAdminUserNumberView {
	vres := &adminviews.Goa2SampleAdminUserNumberView{
		X:     &res.X,
		Y:     &res.Y,
		Size:  res.Size,
		Color: res.Color,
	}
	if res.Data != nil {
		vres.Data = make([]*adminviews.DataView, len(res.Data))
		for i, val := range res.Data {
			vres.Data[i] = transformDataToAdminviewsDataView(val)
		}
	}
	if res.Guide != nil {
		vres.Guide = transformStatsGuideTypeToAdminviewsStatsGuideTypeView(res.Guide)
	}
	return vres
}

// newGoa2SampleAdminUserCollection converts projected type
// Goa2SampleAdminUserCollection to service type Goa2SampleAdminUserCollection.
func newGoa2SampleAdminUserCollection(vres adminviews.Goa2SampleAdminUserCollectionView) Goa2SampleAdminUserCollection {
	res := make(Goa2SampleAdminUserCollection, len(vres))
	for i, n := range vres {
		res[i] = newGoa2SampleAdminUser(n)
	}
	return res
}

// newGoa2SampleAdminUserCollectionView projects result type
// Goa2SampleAdminUserCollection to projected type
// Goa2SampleAdminUserCollectionView using the "default" view.
func newGoa2SampleAdminUserCollectionView(res Goa2SampleAdminUserCollection) adminviews.Goa2SampleAdminUserCollectionView {
	vres := make(adminviews.Goa2SampleAdminUserCollectionView, len(res))
	for i, n := range res {
		vres[i] = newGoa2SampleAdminUserView(n)
	}
	return vres
}

// newGoa2SampleAdminUser converts projected type Goa2SampleAdminUser to
// service type Goa2SampleAdminUser.
func newGoa2SampleAdminUser(vres *adminviews.Goa2SampleAdminUserView) *Goa2SampleAdminUser {
	res := &Goa2SampleAdminUser{
		DeletedAt: vres.DeletedAt,
	}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	if vres.Email != nil {
		res.Email = *vres.Email
	}
	if vres.CreatedAt != nil {
		res.CreatedAt = *vres.CreatedAt
	}
	if vres.UpdatedAt != nil {
		res.UpdatedAt = *vres.UpdatedAt
	}
	return res
}

// newGoa2SampleAdminUserView projects result type Goa2SampleAdminUser to
// projected type Goa2SampleAdminUserView using the "default" view.
func newGoa2SampleAdminUserView(res *Goa2SampleAdminUser) *adminviews.Goa2SampleAdminUserView {
	vres := &adminviews.Goa2SampleAdminUserView{
		ID:        &res.ID,
		Name:      &res.Name,
		Email:     &res.Email,
		CreatedAt: &res.CreatedAt,
		UpdatedAt: &res.UpdatedAt,
		DeletedAt: res.DeletedAt,
	}
	return vres
}

// transformAdminviewsDataViewToData builds a value of type *Data from a value
// of type *adminviews.DataView.
func transformAdminviewsDataViewToData(v *adminviews.DataView) *Data {
	if v == nil {
		return nil
	}
	res := &Data{
		Key:   v.Key,
		Value: v.Value,
	}

	return res
}

// transformAdminviewsStatsGuideTypeViewToStatsGuideType builds a value of type
// *StatsGuideType from a value of type *adminviews.StatsGuideTypeView.
func transformAdminviewsStatsGuideTypeViewToStatsGuideType(v *adminviews.StatsGuideTypeView) *StatsGuideType {
	if v == nil {
		return nil
	}
	res := &StatsGuideType{}
	if v.X != nil {
		res.X = transformAdminviewsStatsLabelTypeViewToStatsLabelType(v.X)
	}
	if v.Y != nil {
		res.Y = transformAdminviewsStatsLabelTypeViewToStatsLabelType(v.Y)
	}

	return res
}

// transformAdminviewsStatsLabelTypeViewToStatsLabelType builds a value of type
// *StatsLabelType from a value of type *adminviews.StatsLabelTypeView.
func transformAdminviewsStatsLabelTypeViewToStatsLabelType(v *adminviews.StatsLabelTypeView) *StatsLabelType {
	if v == nil {
		return nil
	}
	res := &StatsLabelType{
		Label: *v.Label,
	}

	return res
}

// transformDataToAdminviewsDataView builds a value of type
// *adminviews.DataView from a value of type *Data.
func transformDataToAdminviewsDataView(v *Data) *adminviews.DataView {
	res := &adminviews.DataView{
		Key:   v.Key,
		Value: v.Value,
	}

	return res
}

// transformStatsGuideTypeToAdminviewsStatsGuideTypeView builds a value of type
// *adminviews.StatsGuideTypeView from a value of type *StatsGuideType.
func transformStatsGuideTypeToAdminviewsStatsGuideTypeView(v *StatsGuideType) *adminviews.StatsGuideTypeView {
	res := &adminviews.StatsGuideTypeView{}
	if v.X != nil {
		res.X = transformStatsLabelTypeToAdminviewsStatsLabelTypeView(v.X)
	}
	if v.Y != nil {
		res.Y = transformStatsLabelTypeToAdminviewsStatsLabelTypeView(v.Y)
	}

	return res
}

// transformStatsLabelTypeToAdminviewsStatsLabelTypeView builds a value of type
// *adminviews.StatsLabelTypeView from a value of type *StatsLabelType.
func transformStatsLabelTypeToAdminviewsStatsLabelTypeView(v *StatsLabelType) *adminviews.StatsLabelTypeView {
	if v == nil {
		return nil
	}
	res := &adminviews.StatsLabelTypeView{
		Label: &v.Label,
	}

	return res
}
