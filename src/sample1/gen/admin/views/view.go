// Code generated by goa v3.2.6, DO NOT EDIT.
//
// Admin views
//
// Command:
// $ goa gen sample1/design

package views

import (
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// Goa3SampleAdminUserNumber is the viewed result type that is projected based
// on a view.
type Goa3SampleAdminUserNumber struct {
	// Type to project
	Projected *Goa3SampleAdminUserNumberView
	// View to render
	View string
}

// Goa3SampleAdminUserCollection is the viewed result type that is projected
// based on a view.
type Goa3SampleAdminUserCollection struct {
	// Type to project
	Projected Goa3SampleAdminUserCollectionView
	// View to render
	View string
}

// Goa3SampleAdminUser is the viewed result type that is projected based on a
// view.
type Goa3SampleAdminUser struct {
	// Type to project
	Projected *Goa3SampleAdminUserView
	// View to render
	View string
}

// Goa3SampleAdminUserNumberView is a type that runs validations on a projected
// type.
type Goa3SampleAdminUserNumberView struct {
	// グラフデータ
	Data []*DataView
	// X軸に使用するkey
	X *string
	// Y軸に使用するkey
	Y *string
	// ドットの大きさに使用するkey
	Size *string
	// ドットの色分けに使用するkey
	Color *string
	Guide *StatsGuideTypeView
}

// DataView is a type that runs validations on a projected type.
type DataView struct {
	Key   *string
	Value interface{}
}

// StatsGuideTypeView is a type that runs validations on a projected type.
type StatsGuideTypeView struct {
	X *StatsLabelTypeView
	Y *StatsLabelTypeView
}

// StatsLabelTypeView is a type that runs validations on a projected type.
type StatsLabelTypeView struct {
	Label *string
}

// Goa3SampleAdminUserCollectionView is a type that runs validations on a
// projected type.
type Goa3SampleAdminUserCollectionView []*Goa3SampleAdminUserView

// Goa3SampleAdminUserView is a type that runs validations on a projected type.
type Goa3SampleAdminUserView struct {
	// User id
	ID *string
	// Name of user
	Name *string
	// Email of user
	Email     *string
	CreatedAt *string
	UpdatedAt *string
	DeletedAt *string
}

var (
	// Goa3SampleAdminUserNumberMap is a map of attribute names in result type
	// Goa3SampleAdminUserNumber indexed by view name.
	Goa3SampleAdminUserNumberMap = map[string][]string{
		"default": []string{
			"data",
			"x",
			"y",
			"size",
			"color",
			"guide",
		},
	}
	// Goa3SampleAdminUserCollectionMap is a map of attribute names in result type
	// Goa3SampleAdminUserCollection indexed by view name.
	Goa3SampleAdminUserCollectionMap = map[string][]string{
		"default": []string{
			"id",
			"name",
			"email",
			"created_at",
			"updated_at",
			"deleted_at",
		},
	}
	// Goa3SampleAdminUserMap is a map of attribute names in result type
	// Goa3SampleAdminUser indexed by view name.
	Goa3SampleAdminUserMap = map[string][]string{
		"default": []string{
			"id",
			"name",
			"email",
			"created_at",
			"updated_at",
			"deleted_at",
		},
	}
)

// ValidateGoa3SampleAdminUserNumber runs the validations defined on the viewed
// result type Goa3SampleAdminUserNumber.
func ValidateGoa3SampleAdminUserNumber(result *Goa3SampleAdminUserNumber) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateGoa3SampleAdminUserNumberView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateGoa3SampleAdminUserCollection runs the validations defined on the
// viewed result type Goa3SampleAdminUserCollection.
func ValidateGoa3SampleAdminUserCollection(result Goa3SampleAdminUserCollection) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateGoa3SampleAdminUserCollectionView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateGoa3SampleAdminUser runs the validations defined on the viewed
// result type Goa3SampleAdminUser.
func ValidateGoa3SampleAdminUser(result *Goa3SampleAdminUser) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateGoa3SampleAdminUserView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateGoa3SampleAdminUserNumberView runs the validations defined on
// Goa3SampleAdminUserNumberView using the "default" view.
func ValidateGoa3SampleAdminUserNumberView(result *Goa3SampleAdminUserNumberView) (err error) {
	if result.Data == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("data", "result"))
	}
	if result.X == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("x", "result"))
	}
	if result.Y == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("y", "result"))
	}
	if result.Guide == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("guide", "result"))
	}
	if result.Guide != nil {
		if err2 := ValidateStatsGuideTypeView(result.Guide); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateDataView runs the validations defined on DataView.
func ValidateDataView(result *DataView) (err error) {

	return
}

// ValidateStatsGuideTypeView runs the validations defined on
// StatsGuideTypeView.
func ValidateStatsGuideTypeView(result *StatsGuideTypeView) (err error) {
	if result.X != nil {
		if err2 := ValidateStatsLabelTypeView(result.X); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if result.Y != nil {
		if err2 := ValidateStatsLabelTypeView(result.Y); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateStatsLabelTypeView runs the validations defined on
// StatsLabelTypeView.
func ValidateStatsLabelTypeView(result *StatsLabelTypeView) (err error) {
	if result.Label == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("label", "result"))
	}
	return
}

// ValidateGoa3SampleAdminUserCollectionView runs the validations defined on
// Goa3SampleAdminUserCollectionView using the "default" view.
func ValidateGoa3SampleAdminUserCollectionView(result Goa3SampleAdminUserCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateGoa3SampleAdminUserView(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateGoa3SampleAdminUserView runs the validations defined on
// Goa3SampleAdminUserView using the "default" view.
func ValidateGoa3SampleAdminUserView(result *Goa3SampleAdminUserView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "result"))
	}
	if result.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "result"))
	}
	if result.UpdatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("updated_at", "result"))
	}
	if result.ID != nil {
		if utf8.RuneCountInString(*result.ID) < 28 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.id", *result.ID, utf8.RuneCountInString(*result.ID), 28, true))
		}
	}
	if result.ID != nil {
		if utf8.RuneCountInString(*result.ID) > 28 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.id", *result.ID, utf8.RuneCountInString(*result.ID), 28, false))
		}
	}
	return
}
