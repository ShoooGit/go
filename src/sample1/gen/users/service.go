// Code generated by goa v3.2.6, DO NOT EDIT.
//
// Users service
//
// Command:
// $ goa gen sample1/design

package users

import (
	"context"
	usersviews "sample1/gen/users/views"
)

// users serves user account relative information.
type Service interface {
	// List all stored users
	ListUser(context.Context) (res Goa3SampleUserCollection, err error)
	// Show user by ID
	GetUser(context.Context, *GetUserPayload) (res *Goa3SampleUser, err error)
	// Add new user and return its ID.
	CreateUser(context.Context, *CreateUserPayload) (res string, err error)
	// Update user item.
	UpdateUser(context.Context, *UpdateUserPayload) (res *Goa3SampleUser, err error)
	// Delete user by id.
	DeleteUser(context.Context, *DeleteUserPayload) (err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "Users"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [5]string{"list user", "get user", "create user", "update user", "delete user"}

// Goa3SampleUserCollection is the result type of the Users service list user
// method.
type Goa3SampleUserCollection []*Goa3SampleUser

// GetUserPayload is the payload type of the Users service get user method.
type GetUserPayload struct {
	ID string
}

// Goa3SampleUser is the result type of the Users service get user method.
type Goa3SampleUser struct {
	// User id
	ID string
	// Name of user
	Name string
	// Email of user
	Email string
}

// CreateUserPayload is the payload type of the Users service create user
// method.
type CreateUserPayload struct {
	// User id
	ID string
	// Name of user
	Name string
	// Email of user
	Email string
}

// UpdateUserPayload is the payload type of the Users service update user
// method.
type UpdateUserPayload struct {
	// User id
	ID string
	// Name of user
	Name *string
	// Email of user
	Email *string
}

// DeleteUserPayload is the payload type of the Users service delete user
// method.
type DeleteUserPayload struct {
	ID string
}

// NewGoa3SampleUserCollection initializes result type Goa3SampleUserCollection
// from viewed result type Goa3SampleUserCollection.
func NewGoa3SampleUserCollection(vres usersviews.Goa3SampleUserCollection) Goa3SampleUserCollection {
	return newGoa3SampleUserCollection(vres.Projected)
}

// NewViewedGoa3SampleUserCollection initializes viewed result type
// Goa3SampleUserCollection from result type Goa3SampleUserCollection using the
// given view.
func NewViewedGoa3SampleUserCollection(res Goa3SampleUserCollection, view string) usersviews.Goa3SampleUserCollection {
	p := newGoa3SampleUserCollectionView(res)
	return usersviews.Goa3SampleUserCollection{Projected: p, View: "default"}
}

// NewGoa3SampleUser initializes result type Goa3SampleUser from viewed result
// type Goa3SampleUser.
func NewGoa3SampleUser(vres *usersviews.Goa3SampleUser) *Goa3SampleUser {
	return newGoa3SampleUser(vres.Projected)
}

// NewViewedGoa3SampleUser initializes viewed result type Goa3SampleUser from
// result type Goa3SampleUser using the given view.
func NewViewedGoa3SampleUser(res *Goa3SampleUser, view string) *usersviews.Goa3SampleUser {
	p := newGoa3SampleUserView(res)
	return &usersviews.Goa3SampleUser{Projected: p, View: "default"}
}

// newGoa3SampleUserCollection converts projected type Goa3SampleUserCollection
// to service type Goa3SampleUserCollection.
func newGoa3SampleUserCollection(vres usersviews.Goa3SampleUserCollectionView) Goa3SampleUserCollection {
	res := make(Goa3SampleUserCollection, len(vres))
	for i, n := range vres {
		res[i] = newGoa3SampleUser(n)
	}
	return res
}

// newGoa3SampleUserCollectionView projects result type
// Goa3SampleUserCollection to projected type Goa3SampleUserCollectionView
// using the "default" view.
func newGoa3SampleUserCollectionView(res Goa3SampleUserCollection) usersviews.Goa3SampleUserCollectionView {
	vres := make(usersviews.Goa3SampleUserCollectionView, len(res))
	for i, n := range res {
		vres[i] = newGoa3SampleUserView(n)
	}
	return vres
}

// newGoa3SampleUser converts projected type Goa3SampleUser to service type
// Goa3SampleUser.
func newGoa3SampleUser(vres *usersviews.Goa3SampleUserView) *Goa3SampleUser {
	res := &Goa3SampleUser{}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	if vres.Email != nil {
		res.Email = *vres.Email
	}
	return res
}

// newGoa3SampleUserView projects result type Goa3SampleUser to projected type
// Goa3SampleUserView using the "default" view.
func newGoa3SampleUserView(res *Goa3SampleUser) *usersviews.Goa3SampleUserView {
	vres := &usersviews.Goa3SampleUserView{
		ID:    &res.ID,
		Name:  &res.Name,
		Email: &res.Email,
	}
	return vres
}
