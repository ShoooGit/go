// Code generated by goa v3.2.6, DO NOT EDIT.
//
// Users views
//
// Command:
// $ goa gen sample1/design

package views

import (
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// Goa3SampleUserCollection is the viewed result type that is projected based
// on a view.
type Goa3SampleUserCollection struct {
	// Type to project
	Projected Goa3SampleUserCollectionView
	// View to render
	View string
}

// Goa3SampleUser is the viewed result type that is projected based on a view.
type Goa3SampleUser struct {
	// Type to project
	Projected *Goa3SampleUserView
	// View to render
	View string
}

// Goa3SampleUserCollectionView is a type that runs validations on a projected
// type.
type Goa3SampleUserCollectionView []*Goa3SampleUserView

// Goa3SampleUserView is a type that runs validations on a projected type.
type Goa3SampleUserView struct {
	// User id
	ID *string
	// Name of user
	Name *string
	// Email of user
	Email *string
}

var (
	// Goa3SampleUserCollectionMap is a map of attribute names in result type
	// Goa3SampleUserCollection indexed by view name.
	Goa3SampleUserCollectionMap = map[string][]string{
		"default": []string{
			"id",
			"name",
			"email",
		},
	}
	// Goa3SampleUserMap is a map of attribute names in result type Goa3SampleUser
	// indexed by view name.
	Goa3SampleUserMap = map[string][]string{
		"default": []string{
			"id",
			"name",
			"email",
		},
	}
)

// ValidateGoa3SampleUserCollection runs the validations defined on the viewed
// result type Goa3SampleUserCollection.
func ValidateGoa3SampleUserCollection(result Goa3SampleUserCollection) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateGoa3SampleUserCollectionView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateGoa3SampleUser runs the validations defined on the viewed result
// type Goa3SampleUser.
func ValidateGoa3SampleUser(result *Goa3SampleUser) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateGoa3SampleUserView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateGoa3SampleUserCollectionView runs the validations defined on
// Goa3SampleUserCollectionView using the "default" view.
func ValidateGoa3SampleUserCollectionView(result Goa3SampleUserCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateGoa3SampleUserView(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateGoa3SampleUserView runs the validations defined on
// Goa3SampleUserView using the "default" view.
func ValidateGoa3SampleUserView(result *Goa3SampleUserView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "result"))
	}
	if result.ID != nil {
		if utf8.RuneCountInString(*result.ID) < 28 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.id", *result.ID, utf8.RuneCountInString(*result.ID), 28, true))
		}
	}
	if result.ID != nil {
		if utf8.RuneCountInString(*result.ID) > 28 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.id", *result.ID, utf8.RuneCountInString(*result.ID), 28, false))
		}
	}
	return
}
