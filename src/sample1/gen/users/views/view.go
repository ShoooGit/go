// Code generated by goa v3.2.6, DO NOT EDIT.
//
// Users views
//
// Command:
// $ goa gen sample1/design

package views

import (
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// Goa2SampleUserCollection is the viewed result type that is projected based
// on a view.
type Goa2SampleUserCollection struct {
	// Type to project
	Projected Goa2SampleUserCollectionView
	// View to render
	View string
}

// Goa2SampleUser is the viewed result type that is projected based on a view.
type Goa2SampleUser struct {
	// Type to project
	Projected *Goa2SampleUserView
	// View to render
	View string
}

// Goa2SampleUserCollectionView is a type that runs validations on a projected
// type.
type Goa2SampleUserCollectionView []*Goa2SampleUserView

// Goa2SampleUserView is a type that runs validations on a projected type.
type Goa2SampleUserView struct {
	// User id
	ID *string
	// Name of user
	Name *string
	// Email of user
	Email *string
}

var (
	// Goa2SampleUserCollectionMap is a map of attribute names in result type
	// Goa2SampleUserCollection indexed by view name.
	Goa2SampleUserCollectionMap = map[string][]string{
		"default": []string{
			"id",
			"name",
			"email",
		},
	}
	// Goa2SampleUserMap is a map of attribute names in result type Goa2SampleUser
	// indexed by view name.
	Goa2SampleUserMap = map[string][]string{
		"default": []string{
			"id",
			"name",
			"email",
		},
	}
)

// ValidateGoa2SampleUserCollection runs the validations defined on the viewed
// result type Goa2SampleUserCollection.
func ValidateGoa2SampleUserCollection(result Goa2SampleUserCollection) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateGoa2SampleUserCollectionView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateGoa2SampleUser runs the validations defined on the viewed result
// type Goa2SampleUser.
func ValidateGoa2SampleUser(result *Goa2SampleUser) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateGoa2SampleUserView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateGoa2SampleUserCollectionView runs the validations defined on
// Goa2SampleUserCollectionView using the "default" view.
func ValidateGoa2SampleUserCollectionView(result Goa2SampleUserCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateGoa2SampleUserView(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateGoa2SampleUserView runs the validations defined on
// Goa2SampleUserView using the "default" view.
func ValidateGoa2SampleUserView(result *Goa2SampleUserView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "result"))
	}
	if result.ID != nil {
		if utf8.RuneCountInString(*result.ID) < 28 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.id", *result.ID, utf8.RuneCountInString(*result.ID), 28, true))
		}
	}
	if result.ID != nil {
		if utf8.RuneCountInString(*result.ID) > 28 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.id", *result.ID, utf8.RuneCountInString(*result.ID), 28, false))
		}
	}
	return
}
