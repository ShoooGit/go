// Code generated by goa v3.2.6, DO NOT EDIT.
//
// goa3-sample HTTP client CLI support package
//
// Command:
// $ goa gen sample1/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"
	adminc "sample1/gen/http/admin/client"
	usersc "sample1/gen/http/users/client"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `admin (user-number|admin- list- user|admin- get- user|admin- create- user|admin- update- user|admin- delete- user)
users (list- user|get- user|create- user|update- user|delete- user)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` admin user-number` + "\n" +
		os.Args[0] + ` users list- user` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		adminFlags = flag.NewFlagSet("admin", flag.ContinueOnError)

		adminUserNumberFlags = flag.NewFlagSet("user-number", flag.ExitOnError)

		adminAdminListUserFlags = flag.NewFlagSet("admin- list- user", flag.ExitOnError)

		adminAdminGetUserFlags  = flag.NewFlagSet("admin- get- user", flag.ExitOnError)
		adminAdminGetUserIDFlag = adminAdminGetUserFlags.String("id", "REQUIRED", "")

		adminAdminCreateUserFlags    = flag.NewFlagSet("admin- create- user", flag.ExitOnError)
		adminAdminCreateUserBodyFlag = adminAdminCreateUserFlags.String("body", "REQUIRED", "")

		adminAdminUpdateUserFlags    = flag.NewFlagSet("admin- update- user", flag.ExitOnError)
		adminAdminUpdateUserBodyFlag = adminAdminUpdateUserFlags.String("body", "REQUIRED", "")
		adminAdminUpdateUserIDFlag   = adminAdminUpdateUserFlags.String("id", "REQUIRED", "User id")

		adminAdminDeleteUserFlags  = flag.NewFlagSet("admin- delete- user", flag.ExitOnError)
		adminAdminDeleteUserIDFlag = adminAdminDeleteUserFlags.String("id", "REQUIRED", "")

		usersFlags = flag.NewFlagSet("users", flag.ContinueOnError)

		usersListUserFlags = flag.NewFlagSet("list- user", flag.ExitOnError)

		usersGetUserFlags  = flag.NewFlagSet("get- user", flag.ExitOnError)
		usersGetUserIDFlag = usersGetUserFlags.String("id", "REQUIRED", "")

		usersCreateUserFlags    = flag.NewFlagSet("create- user", flag.ExitOnError)
		usersCreateUserBodyFlag = usersCreateUserFlags.String("body", "REQUIRED", "")

		usersUpdateUserFlags    = flag.NewFlagSet("update- user", flag.ExitOnError)
		usersUpdateUserBodyFlag = usersUpdateUserFlags.String("body", "REQUIRED", "")
		usersUpdateUserIDFlag   = usersUpdateUserFlags.String("id", "REQUIRED", "User id")

		usersDeleteUserFlags  = flag.NewFlagSet("delete- user", flag.ExitOnError)
		usersDeleteUserIDFlag = usersDeleteUserFlags.String("id", "REQUIRED", "")
	)
	adminFlags.Usage = adminUsage
	adminUserNumberFlags.Usage = adminUserNumberUsage
	adminAdminListUserFlags.Usage = adminAdminListUserUsage
	adminAdminGetUserFlags.Usage = adminAdminGetUserUsage
	adminAdminCreateUserFlags.Usage = adminAdminCreateUserUsage
	adminAdminUpdateUserFlags.Usage = adminAdminUpdateUserUsage
	adminAdminDeleteUserFlags.Usage = adminAdminDeleteUserUsage

	usersFlags.Usage = usersUsage
	usersListUserFlags.Usage = usersListUserUsage
	usersGetUserFlags.Usage = usersGetUserUsage
	usersCreateUserFlags.Usage = usersCreateUserUsage
	usersUpdateUserFlags.Usage = usersUpdateUserUsage
	usersDeleteUserFlags.Usage = usersDeleteUserUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "admin":
			svcf = adminFlags
		case "users":
			svcf = usersFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "admin":
			switch epn {
			case "user-number":
				epf = adminUserNumberFlags

			case "admin- list- user":
				epf = adminAdminListUserFlags

			case "admin- get- user":
				epf = adminAdminGetUserFlags

			case "admin- create- user":
				epf = adminAdminCreateUserFlags

			case "admin- update- user":
				epf = adminAdminUpdateUserFlags

			case "admin- delete- user":
				epf = adminAdminDeleteUserFlags

			}

		case "users":
			switch epn {
			case "list- user":
				epf = usersListUserFlags

			case "get- user":
				epf = usersGetUserFlags

			case "create- user":
				epf = usersCreateUserFlags

			case "update- user":
				epf = usersUpdateUserFlags

			case "delete- user":
				epf = usersDeleteUserFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "admin":
			c := adminc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "user-number":
				endpoint = c.UserNumber()
				data = nil
			case "admin- list- user":
				endpoint = c.AdminListUser()
				data = nil
			case "admin- get- user":
				endpoint = c.AdminGetUser()
				data, err = adminc.BuildAdminGetUserPayload(*adminAdminGetUserIDFlag)
			case "admin- create- user":
				endpoint = c.AdminCreateUser()
				data, err = adminc.BuildAdminCreateUserPayload(*adminAdminCreateUserBodyFlag)
			case "admin- update- user":
				endpoint = c.AdminUpdateUser()
				data, err = adminc.BuildAdminUpdateUserPayload(*adminAdminUpdateUserBodyFlag, *adminAdminUpdateUserIDFlag)
			case "admin- delete- user":
				endpoint = c.AdminDeleteUser()
				data, err = adminc.BuildAdminDeleteUserPayload(*adminAdminDeleteUserIDFlag)
			}
		case "users":
			c := usersc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "list- user":
				endpoint = c.ListUser()
				data = nil
			case "get- user":
				endpoint = c.GetUser()
				data, err = usersc.BuildGetUserPayload(*usersGetUserIDFlag)
			case "create- user":
				endpoint = c.CreateUser()
				data, err = usersc.BuildCreateUserPayload(*usersCreateUserBodyFlag)
			case "update- user":
				endpoint = c.UpdateUser()
				data, err = usersc.BuildUpdateUserPayload(*usersUpdateUserBodyFlag, *usersUpdateUserIDFlag)
			case "delete- user":
				endpoint = c.DeleteUser()
				data, err = usersc.BuildDeleteUserPayload(*usersDeleteUserIDFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// adminUsage displays the usage of the admin command and its subcommands.
func adminUsage() {
	fmt.Fprintf(os.Stderr, `Admin provide functions for the management screen.
Usage:
    %s [globalflags] admin COMMAND [flags]

COMMAND:
    user-number: Number of users
    admin- list- user: List all stored users
    admin- get- user: Show user by ID
    admin- create- user: Add new user and return its ID.
    admin- update- user: Update user item.
    admin- delete- user: Delete user by id.

Additional help:
    %s admin COMMAND --help
`, os.Args[0], os.Args[0])
}
func adminUserNumberUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] admin user-number

Number of users

Example:
    `+os.Args[0]+` admin user-number
`, os.Args[0])
}

func adminAdminListUserUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] admin admin- list- user

List all stored users

Example:
    `+os.Args[0]+` admin admin- list- user
`, os.Args[0])
}

func adminAdminGetUserUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] admin admin- get- user -id STRING

Show user by ID
    -id STRING: 

Example:
    `+os.Args[0]+` admin admin- get- user --id "Et occaecati assumenda."
`, os.Args[0])
}

func adminAdminCreateUserUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] admin admin- create- user -body JSON

Add new user and return its ID.
    -body JSON: 

Example:
    `+os.Args[0]+` admin admin- create- user --body '{
      "email": "At facilis quam rerum.",
      "id": "XRQ85mtXnINISH25zfM0m5RlC6L2",
      "name": "Adipisci esse."
   }'
`, os.Args[0])
}

func adminAdminUpdateUserUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] admin admin- update- user -body JSON -id STRING

Update user item.
    -body JSON: 
    -id STRING: User id

Example:
    `+os.Args[0]+` admin admin- update- user --body '{
      "email": "Quia qui sed culpa eius.",
      "name": "Provident neque cum in optio."
   }' --id "XRQ85mtXnINISH25zfM0m5RlC6L2"
`, os.Args[0])
}

func adminAdminDeleteUserUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] admin admin- delete- user -id STRING

Delete user by id.
    -id STRING: 

Example:
    `+os.Args[0]+` admin admin- delete- user --id "Sed quis quia voluptas placeat est minus."
`, os.Args[0])
}

// usersUsage displays the usage of the users command and its subcommands.
func usersUsage() {
	fmt.Fprintf(os.Stderr, `users serves user account relative information.
Usage:
    %s [globalflags] users COMMAND [flags]

COMMAND:
    list- user: List all stored users
    get- user: Show user by ID
    create- user: Add new user and return its ID.
    update- user: Update user item.
    delete- user: Delete user by id.

Additional help:
    %s users COMMAND --help
`, os.Args[0], os.Args[0])
}
func usersListUserUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] users list- user

List all stored users

Example:
    `+os.Args[0]+` users list- user
`, os.Args[0])
}

func usersGetUserUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] users get- user -id STRING

Show user by ID
    -id STRING: 

Example:
    `+os.Args[0]+` users get- user --id "Eveniet est."
`, os.Args[0])
}

func usersCreateUserUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] users create- user -body JSON

Add new user and return its ID.
    -body JSON: 

Example:
    `+os.Args[0]+` users create- user --body '{
      "email": "Modi rerum.",
      "id": "XRQ85mtXnINISH25zfM0m5RlC6L2",
      "name": "Odio hic non et nostrum incidunt."
   }'
`, os.Args[0])
}

func usersUpdateUserUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] users update- user -body JSON -id STRING

Update user item.
    -body JSON: 
    -id STRING: User id

Example:
    `+os.Args[0]+` users update- user --body '{
      "email": "Iure nihil corrupti.",
      "name": "Consequatur ratione rerum dignissimos nostrum."
   }' --id "XRQ85mtXnINISH25zfM0m5RlC6L2"
`, os.Args[0])
}

func usersDeleteUserUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] users delete- user -id STRING

Delete user by id.
    -id STRING: 

Example:
    `+os.Args[0]+` users delete- user --id "Sapiente id quaerat enim."
`, os.Args[0])
}
