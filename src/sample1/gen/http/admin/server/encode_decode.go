// Code generated by goa v3.2.6, DO NOT EDIT.
//
// Admin HTTP server encoders and decoders
//
// Command:
// $ goa gen sample1/design

package server

import (
	"context"
	"io"
	"net/http"
	adminviews "sample1/gen/admin/views"
	"unicode/utf8"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeUserNumberResponse returns an encoder for responses returned by the
// Admin user_number endpoint.
func EncodeUserNumberResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*adminviews.Goa3SampleAdminUserNumber)
		ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
		enc := encoder(ctx, w)
		body := NewUserNumberResponseBody(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// EncodeAdminListUserResponse returns an encoder for responses returned by the
// Admin admin list user endpoint.
func EncodeAdminListUserResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(adminviews.Goa3SampleAdminUserCollection)
		enc := encoder(ctx, w)
		body := NewGoa3SampleAdminUserResponseCollection(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// EncodeAdminGetUserResponse returns an encoder for responses returned by the
// Admin admin get user endpoint.
func EncodeAdminGetUserResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*adminviews.Goa3SampleAdminUser)
		ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
		enc := encoder(ctx, w)
		body := NewAdminGetUserResponseBody(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeAdminGetUserRequest returns a decoder for requests sent to the Admin
// admin get user endpoint.
func DecodeAdminGetUserRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			id string

			params = mux.Vars(r)
		)
		id = params["id"]
		payload := NewAdminGetUserGetUserPayload(id)

		return payload, nil
	}
}

// EncodeAdminCreateUserResponse returns an encoder for responses returned by
// the Admin admin create user endpoint.
func EncodeAdminCreateUserResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(string)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusCreated)
		return enc.Encode(body)
	}
}

// DecodeAdminCreateUserRequest returns a decoder for requests sent to the
// Admin admin create user endpoint.
func DecodeAdminCreateUserRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body AdminCreateUserRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateAdminCreateUserRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewAdminCreateUserCreateUserPayload(&body)

		return payload, nil
	}
}

// EncodeAdminUpdateUserResponse returns an encoder for responses returned by
// the Admin admin update user endpoint.
func EncodeAdminUpdateUserResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*adminviews.Goa3SampleAdminUser)
		ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
		enc := encoder(ctx, w)
		body := NewAdminUpdateUserResponseBody(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeAdminUpdateUserRequest returns a decoder for requests sent to the
// Admin admin update user endpoint.
func DecodeAdminUpdateUserRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body AdminUpdateUserRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}

		var (
			id string

			params = mux.Vars(r)
		)
		id = params["id"]
		if utf8.RuneCountInString(id) < 28 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("id", id, utf8.RuneCountInString(id), 28, true))
		}
		if utf8.RuneCountInString(id) > 28 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("id", id, utf8.RuneCountInString(id), 28, false))
		}
		if err != nil {
			return nil, err
		}
		payload := NewAdminUpdateUserUpdateUserPayload(&body, id)

		return payload, nil
	}
}

// EncodeAdminDeleteUserResponse returns an encoder for responses returned by
// the Admin admin delete user endpoint.
func EncodeAdminDeleteUserResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusNoContent)
		return nil
	}
}

// DecodeAdminDeleteUserRequest returns a decoder for requests sent to the
// Admin admin delete user endpoint.
func DecodeAdminDeleteUserRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			id string

			params = mux.Vars(r)
		)
		id = params["id"]
		payload := NewAdminDeleteUserDeleteUserPayload(id)

		return payload, nil
	}
}

// marshalAdminviewsDataViewToDataResponseBody builds a value of type
// *DataResponseBody from a value of type *adminviews.DataView.
func marshalAdminviewsDataViewToDataResponseBody(v *adminviews.DataView) *DataResponseBody {
	res := &DataResponseBody{
		Key:   v.Key,
		Value: v.Value,
	}

	return res
}

// marshalAdminviewsStatsGuideTypeViewToStatsGuideTypeResponseBody builds a
// value of type *StatsGuideTypeResponseBody from a value of type
// *adminviews.StatsGuideTypeView.
func marshalAdminviewsStatsGuideTypeViewToStatsGuideTypeResponseBody(v *adminviews.StatsGuideTypeView) *StatsGuideTypeResponseBody {
	res := &StatsGuideTypeResponseBody{}
	if v.X != nil {
		res.X = marshalAdminviewsStatsLabelTypeViewToStatsLabelTypeResponseBody(v.X)
	}
	if v.Y != nil {
		res.Y = marshalAdminviewsStatsLabelTypeViewToStatsLabelTypeResponseBody(v.Y)
	}

	return res
}

// marshalAdminviewsStatsLabelTypeViewToStatsLabelTypeResponseBody builds a
// value of type *StatsLabelTypeResponseBody from a value of type
// *adminviews.StatsLabelTypeView.
func marshalAdminviewsStatsLabelTypeViewToStatsLabelTypeResponseBody(v *adminviews.StatsLabelTypeView) *StatsLabelTypeResponseBody {
	if v == nil {
		return nil
	}
	res := &StatsLabelTypeResponseBody{
		Label: *v.Label,
	}

	return res
}

// marshalAdminviewsGoa3SampleAdminUserViewToGoa3SampleAdminUserResponse builds
// a value of type *Goa3SampleAdminUserResponse from a value of type
// *adminviews.Goa3SampleAdminUserView.
func marshalAdminviewsGoa3SampleAdminUserViewToGoa3SampleAdminUserResponse(v *adminviews.Goa3SampleAdminUserView) *Goa3SampleAdminUserResponse {
	res := &Goa3SampleAdminUserResponse{
		ID:        *v.ID,
		Name:      *v.Name,
		Email:     *v.Email,
		CreatedAt: *v.CreatedAt,
		UpdatedAt: *v.UpdatedAt,
		DeletedAt: v.DeletedAt,
	}

	return res
}
