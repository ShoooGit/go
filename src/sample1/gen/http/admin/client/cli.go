// Code generated by goa v3.2.6, DO NOT EDIT.
//
// Admin HTTP client CLI support package
//
// Command:
// $ goa gen sample1/design

package client

import (
	"encoding/json"
	"fmt"
	admin "sample1/gen/admin"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// BuildAdminGetUserPayload builds the payload for the Admin admin get user
// endpoint from CLI flags.
func BuildAdminGetUserPayload(adminAdminGetUserID string) (*admin.GetUserPayload, error) {
	var id string
	{
		id = adminAdminGetUserID
	}
	v := &admin.GetUserPayload{}
	v.ID = id

	return v, nil
}

// BuildAdminCreateUserPayload builds the payload for the Admin admin create
// user endpoint from CLI flags.
func BuildAdminCreateUserPayload(adminAdminCreateUserBody string) (*admin.CreateUserPayload, error) {
	var err error
	var body AdminCreateUserRequestBody
	{
		err = json.Unmarshal([]byte(adminAdminCreateUserBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"email\": \"Molestiae reiciendis.\",\n      \"id\": \"XRQ85mtXnINISH25zfM0m5RlC6L2\",\n      \"name\": \"Rerum doloremque eligendi et voluptatibus.\"\n   }'")
		}
		if utf8.RuneCountInString(body.ID) < 28 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.id", body.ID, utf8.RuneCountInString(body.ID), 28, true))
		}
		if utf8.RuneCountInString(body.ID) > 28 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.id", body.ID, utf8.RuneCountInString(body.ID), 28, false))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &admin.CreateUserPayload{
		ID:    body.ID,
		Name:  body.Name,
		Email: body.Email,
	}

	return v, nil
}

// BuildAdminUpdateUserPayload builds the payload for the Admin admin update
// user endpoint from CLI flags.
func BuildAdminUpdateUserPayload(adminAdminUpdateUserBody string, adminAdminUpdateUserID string) (*admin.UpdateUserPayload, error) {
	var err error
	var body AdminUpdateUserRequestBody
	{
		err = json.Unmarshal([]byte(adminAdminUpdateUserBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"email\": \"Et neque aut nisi magni.\",\n      \"name\": \"Ipsam dignissimos consectetur amet.\"\n   }'")
		}
	}
	var id string
	{
		id = adminAdminUpdateUserID
		if utf8.RuneCountInString(id) < 28 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("id", id, utf8.RuneCountInString(id), 28, true))
		}
		if utf8.RuneCountInString(id) > 28 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("id", id, utf8.RuneCountInString(id), 28, false))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &admin.UpdateUserPayload{
		Name:  body.Name,
		Email: body.Email,
	}
	v.ID = id

	return v, nil
}

// BuildAdminDeleteUserPayload builds the payload for the Admin admin delete
// user endpoint from CLI flags.
func BuildAdminDeleteUserPayload(adminAdminDeleteUserID string) (*admin.DeleteUserPayload, error) {
	var id string
	{
		id = adminAdminDeleteUserID
	}
	v := &admin.DeleteUserPayload{}
	v.ID = id

	return v, nil
}
