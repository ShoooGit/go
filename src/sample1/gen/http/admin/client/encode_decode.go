// Code generated by goa v3.2.6, DO NOT EDIT.
//
// Admin HTTP client encoders and decoders
//
// Command:
// $ goa gen sample1/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	admin "sample1/gen/admin"
	adminviews "sample1/gen/admin/views"

	goahttp "goa.design/goa/v3/http"
)

// BuildUserNumberRequest instantiates a HTTP request object with method and
// path set to call the "Admin" service "user_number" endpoint
func (c *Client) BuildUserNumberRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UserNumberAdminPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Admin", "user_number", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeUserNumberResponse returns a decoder for responses returned by the
// Admin user_number endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeUserNumberResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UserNumberResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Admin", "user_number", err)
			}
			p := NewUserNumberGoa2SampleAdminUserNumberOK(&body)
			view := "default"
			vres := &adminviews.Goa2SampleAdminUserNumber{Projected: p, View: view}
			if err = adminviews.ValidateGoa2SampleAdminUserNumber(vres); err != nil {
				return nil, goahttp.ErrValidationError("Admin", "user_number", err)
			}
			res := admin.NewGoa2SampleAdminUserNumber(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Admin", "user_number", resp.StatusCode, string(body))
		}
	}
}

// BuildAdminListUserRequest instantiates a HTTP request object with method and
// path set to call the "Admin" service "admin list user" endpoint
func (c *Client) BuildAdminListUserRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: AdminListUserAdminPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Admin", "admin list user", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeAdminListUserResponse returns a decoder for responses returned by the
// Admin admin list user endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeAdminListUserResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body AdminListUserResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Admin", "admin list user", err)
			}
			p := NewAdminListUserGoa2SampleAdminUserCollectionOK(body)
			view := "default"
			vres := adminviews.Goa2SampleAdminUserCollection{Projected: p, View: view}
			if err = adminviews.ValidateGoa2SampleAdminUserCollection(vres); err != nil {
				return nil, goahttp.ErrValidationError("Admin", "admin list user", err)
			}
			res := admin.NewGoa2SampleAdminUserCollection(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Admin", "admin list user", resp.StatusCode, string(body))
		}
	}
}

// BuildAdminGetUserRequest instantiates a HTTP request object with method and
// path set to call the "Admin" service "admin get user" endpoint
func (c *Client) BuildAdminGetUserRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*admin.GetUserPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("Admin", "admin get user", "*admin.GetUserPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: AdminGetUserAdminPath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Admin", "admin get user", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeAdminGetUserResponse returns a decoder for responses returned by the
// Admin admin get user endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeAdminGetUserResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body AdminGetUserResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Admin", "admin get user", err)
			}
			p := NewAdminGetUserGoa2SampleAdminUserOK(&body)
			view := "default"
			vres := &adminviews.Goa2SampleAdminUser{Projected: p, View: view}
			if err = adminviews.ValidateGoa2SampleAdminUser(vres); err != nil {
				return nil, goahttp.ErrValidationError("Admin", "admin get user", err)
			}
			res := admin.NewGoa2SampleAdminUser(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Admin", "admin get user", resp.StatusCode, string(body))
		}
	}
}

// BuildAdminCreateUserRequest instantiates a HTTP request object with method
// and path set to call the "Admin" service "admin create user" endpoint
func (c *Client) BuildAdminCreateUserRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: AdminCreateUserAdminPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Admin", "admin create user", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeAdminCreateUserRequest returns an encoder for requests sent to the
// Admin admin create user server.
func EncodeAdminCreateUserRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*admin.CreateUserPayload)
		if !ok {
			return goahttp.ErrInvalidType("Admin", "admin create user", "*admin.CreateUserPayload", v)
		}
		body := NewAdminCreateUserRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("Admin", "admin create user", err)
		}
		return nil
	}
}

// DecodeAdminCreateUserResponse returns a decoder for responses returned by
// the Admin admin create user endpoint. restoreBody controls whether the
// response body should be restored after having been read.
func DecodeAdminCreateUserResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Admin", "admin create user", err)
			}
			return body, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Admin", "admin create user", resp.StatusCode, string(body))
		}
	}
}

// BuildAdminUpdateUserRequest instantiates a HTTP request object with method
// and path set to call the "Admin" service "admin update user" endpoint
func (c *Client) BuildAdminUpdateUserRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*admin.UpdateUserPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("Admin", "admin update user", "*admin.UpdateUserPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: AdminUpdateUserAdminPath(id)}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Admin", "admin update user", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeAdminUpdateUserRequest returns an encoder for requests sent to the
// Admin admin update user server.
func EncodeAdminUpdateUserRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*admin.UpdateUserPayload)
		if !ok {
			return goahttp.ErrInvalidType("Admin", "admin update user", "*admin.UpdateUserPayload", v)
		}
		body := NewAdminUpdateUserRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("Admin", "admin update user", err)
		}
		return nil
	}
}

// DecodeAdminUpdateUserResponse returns a decoder for responses returned by
// the Admin admin update user endpoint. restoreBody controls whether the
// response body should be restored after having been read.
func DecodeAdminUpdateUserResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body AdminUpdateUserResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Admin", "admin update user", err)
			}
			p := NewAdminUpdateUserGoa2SampleAdminUserOK(&body)
			view := "default"
			vres := &adminviews.Goa2SampleAdminUser{Projected: p, View: view}
			if err = adminviews.ValidateGoa2SampleAdminUser(vres); err != nil {
				return nil, goahttp.ErrValidationError("Admin", "admin update user", err)
			}
			res := admin.NewGoa2SampleAdminUser(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Admin", "admin update user", resp.StatusCode, string(body))
		}
	}
}

// BuildAdminDeleteUserRequest instantiates a HTTP request object with method
// and path set to call the "Admin" service "admin delete user" endpoint
func (c *Client) BuildAdminDeleteUserRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*admin.DeleteUserPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("Admin", "admin delete user", "*admin.DeleteUserPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: AdminDeleteUserAdminPath(id)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Admin", "admin delete user", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeAdminDeleteUserResponse returns a decoder for responses returned by
// the Admin admin delete user endpoint. restoreBody controls whether the
// response body should be restored after having been read.
func DecodeAdminDeleteUserResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Admin", "admin delete user", resp.StatusCode, string(body))
		}
	}
}

// unmarshalDataResponseBodyToAdminviewsDataView builds a value of type
// *adminviews.DataView from a value of type *DataResponseBody.
func unmarshalDataResponseBodyToAdminviewsDataView(v *DataResponseBody) *adminviews.DataView {
	res := &adminviews.DataView{
		Key:   v.Key,
		Value: v.Value,
	}

	return res
}

// unmarshalStatsGuideTypeResponseBodyToAdminviewsStatsGuideTypeView builds a
// value of type *adminviews.StatsGuideTypeView from a value of type
// *StatsGuideTypeResponseBody.
func unmarshalStatsGuideTypeResponseBodyToAdminviewsStatsGuideTypeView(v *StatsGuideTypeResponseBody) *adminviews.StatsGuideTypeView {
	res := &adminviews.StatsGuideTypeView{}
	if v.X != nil {
		res.X = unmarshalStatsLabelTypeResponseBodyToAdminviewsStatsLabelTypeView(v.X)
	}
	if v.Y != nil {
		res.Y = unmarshalStatsLabelTypeResponseBodyToAdminviewsStatsLabelTypeView(v.Y)
	}

	return res
}

// unmarshalStatsLabelTypeResponseBodyToAdminviewsStatsLabelTypeView builds a
// value of type *adminviews.StatsLabelTypeView from a value of type
// *StatsLabelTypeResponseBody.
func unmarshalStatsLabelTypeResponseBodyToAdminviewsStatsLabelTypeView(v *StatsLabelTypeResponseBody) *adminviews.StatsLabelTypeView {
	if v == nil {
		return nil
	}
	res := &adminviews.StatsLabelTypeView{
		Label: v.Label,
	}

	return res
}

// unmarshalGoa2SampleAdminUserResponseToAdminviewsGoa2SampleAdminUserView
// builds a value of type *adminviews.Goa2SampleAdminUserView from a value of
// type *Goa2SampleAdminUserResponse.
func unmarshalGoa2SampleAdminUserResponseToAdminviewsGoa2SampleAdminUserView(v *Goa2SampleAdminUserResponse) *adminviews.Goa2SampleAdminUserView {
	res := &adminviews.Goa2SampleAdminUserView{
		ID:        v.ID,
		Name:      v.Name,
		Email:     v.Email,
		CreatedAt: v.CreatedAt,
		UpdatedAt: v.UpdatedAt,
		DeletedAt: v.DeletedAt,
	}

	return res
}
