// Code generated by goa v3.2.6, DO NOT EDIT.
//
// Users HTTP client encoders and decoders
//
// Command:
// $ goa gen sample1/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	users "sample1/gen/users"
	usersviews "sample1/gen/users/views"

	goahttp "goa.design/goa/v3/http"
)

// BuildListUserRequest instantiates a HTTP request object with method and path
// set to call the "Users" service "list user" endpoint
func (c *Client) BuildListUserRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListUserUsersPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Users", "list user", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeListUserResponse returns a decoder for responses returned by the Users
// list user endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeListUserResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListUserResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Users", "list user", err)
			}
			p := NewListUserGoa2SampleUserCollectionOK(body)
			view := "default"
			vres := usersviews.Goa2SampleUserCollection{Projected: p, View: view}
			if err = usersviews.ValidateGoa2SampleUserCollection(vres); err != nil {
				return nil, goahttp.ErrValidationError("Users", "list user", err)
			}
			res := users.NewGoa2SampleUserCollection(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Users", "list user", resp.StatusCode, string(body))
		}
	}
}

// BuildGetUserRequest instantiates a HTTP request object with method and path
// set to call the "Users" service "get user" endpoint
func (c *Client) BuildGetUserRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*users.GetUserPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("Users", "get user", "*users.GetUserPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetUserUsersPath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Users", "get user", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetUserResponse returns a decoder for responses returned by the Users
// get user endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeGetUserResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetUserResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Users", "get user", err)
			}
			p := NewGetUserGoa2SampleUserOK(&body)
			view := "default"
			vres := &usersviews.Goa2SampleUser{Projected: p, View: view}
			if err = usersviews.ValidateGoa2SampleUser(vres); err != nil {
				return nil, goahttp.ErrValidationError("Users", "get user", err)
			}
			res := users.NewGoa2SampleUser(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Users", "get user", resp.StatusCode, string(body))
		}
	}
}

// BuildCreateUserRequest instantiates a HTTP request object with method and
// path set to call the "Users" service "create user" endpoint
func (c *Client) BuildCreateUserRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateUserUsersPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Users", "create user", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateUserRequest returns an encoder for requests sent to the Users
// create user server.
func EncodeCreateUserRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*users.CreateUserPayload)
		if !ok {
			return goahttp.ErrInvalidType("Users", "create user", "*users.CreateUserPayload", v)
		}
		body := NewCreateUserRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("Users", "create user", err)
		}
		return nil
	}
}

// DecodeCreateUserResponse returns a decoder for responses returned by the
// Users create user endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeCreateUserResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Users", "create user", err)
			}
			return body, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Users", "create user", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateUserRequest instantiates a HTTP request object with method and
// path set to call the "Users" service "update user" endpoint
func (c *Client) BuildUpdateUserRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*users.UpdateUserPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("Users", "update user", "*users.UpdateUserPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateUserUsersPath(id)}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Users", "update user", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateUserRequest returns an encoder for requests sent to the Users
// update user server.
func EncodeUpdateUserRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*users.UpdateUserPayload)
		if !ok {
			return goahttp.ErrInvalidType("Users", "update user", "*users.UpdateUserPayload", v)
		}
		body := NewUpdateUserRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("Users", "update user", err)
		}
		return nil
	}
}

// DecodeUpdateUserResponse returns a decoder for responses returned by the
// Users update user endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeUpdateUserResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UpdateUserResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Users", "update user", err)
			}
			p := NewUpdateUserGoa2SampleUserOK(&body)
			view := "default"
			vres := &usersviews.Goa2SampleUser{Projected: p, View: view}
			if err = usersviews.ValidateGoa2SampleUser(vres); err != nil {
				return nil, goahttp.ErrValidationError("Users", "update user", err)
			}
			res := users.NewGoa2SampleUser(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Users", "update user", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteUserRequest instantiates a HTTP request object with method and
// path set to call the "Users" service "delete user" endpoint
func (c *Client) BuildDeleteUserRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*users.DeleteUserPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("Users", "delete user", "*users.DeleteUserPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteUserUsersPath(id)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Users", "delete user", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeDeleteUserResponse returns a decoder for responses returned by the
// Users delete user endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeDeleteUserResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Users", "delete user", resp.StatusCode, string(body))
		}
	}
}

// unmarshalGoa2SampleUserResponseToUsersviewsGoa2SampleUserView builds a value
// of type *usersviews.Goa2SampleUserView from a value of type
// *Goa2SampleUserResponse.
func unmarshalGoa2SampleUserResponseToUsersviewsGoa2SampleUserView(v *Goa2SampleUserResponse) *usersviews.Goa2SampleUserView {
	res := &usersviews.Goa2SampleUserView{
		ID:    v.ID,
		Name:  v.Name,
		Email: v.Email,
	}

	return res
}
