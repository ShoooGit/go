// Code generated by goa v3.2.6, DO NOT EDIT.
//
// Users HTTP client types
//
// Command:
// $ goa gen sample1/design

package client

import (
	users "sample1/gen/users"
	usersviews "sample1/gen/users/views"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// CreateUserRequestBody is the type of the "Users" service "create user"
// endpoint HTTP request body.
type CreateUserRequestBody struct {
	// User id
	ID string `form:"id" json:"id" xml:"id"`
	// Name of user
	Name string `form:"name" json:"name" xml:"name"`
	// Email of user
	Email string `form:"email" json:"email" xml:"email"`
}

// UpdateUserRequestBody is the type of the "Users" service "update user"
// endpoint HTTP request body.
type UpdateUserRequestBody struct {
	// Name of user
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Email of user
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
}

// ListUserResponseBody is the type of the "Users" service "list user" endpoint
// HTTP response body.
type ListUserResponseBody []*Goa2SampleUserResponse

// GetUserResponseBody is the type of the "Users" service "get user" endpoint
// HTTP response body.
type GetUserResponseBody struct {
	// User id
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Name of user
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Email of user
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
}

// UpdateUserResponseBody is the type of the "Users" service "update user"
// endpoint HTTP response body.
type UpdateUserResponseBody struct {
	// User id
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Name of user
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Email of user
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
}

// Goa2SampleUserResponse is used to define fields on response body types.
type Goa2SampleUserResponse struct {
	// User id
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Name of user
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Email of user
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
}

// NewCreateUserRequestBody builds the HTTP request body from the payload of
// the "create user" endpoint of the "Users" service.
func NewCreateUserRequestBody(p *users.CreateUserPayload) *CreateUserRequestBody {
	body := &CreateUserRequestBody{
		ID:    p.ID,
		Name:  p.Name,
		Email: p.Email,
	}
	return body
}

// NewUpdateUserRequestBody builds the HTTP request body from the payload of
// the "update user" endpoint of the "Users" service.
func NewUpdateUserRequestBody(p *users.UpdateUserPayload) *UpdateUserRequestBody {
	body := &UpdateUserRequestBody{
		Name:  p.Name,
		Email: p.Email,
	}
	return body
}

// NewListUserGoa2SampleUserCollectionOK builds a "Users" service "list user"
// endpoint result from a HTTP "OK" response.
func NewListUserGoa2SampleUserCollectionOK(body ListUserResponseBody) usersviews.Goa2SampleUserCollectionView {
	v := make([]*usersviews.Goa2SampleUserView, len(body))
	for i, val := range body {
		v[i] = unmarshalGoa2SampleUserResponseToUsersviewsGoa2SampleUserView(val)
	}
	return v
}

// NewGetUserGoa2SampleUserOK builds a "Users" service "get user" endpoint
// result from a HTTP "OK" response.
func NewGetUserGoa2SampleUserOK(body *GetUserResponseBody) *usersviews.Goa2SampleUserView {
	v := &usersviews.Goa2SampleUserView{
		ID:    body.ID,
		Name:  body.Name,
		Email: body.Email,
	}

	return v
}

// NewUpdateUserGoa2SampleUserOK builds a "Users" service "update user"
// endpoint result from a HTTP "OK" response.
func NewUpdateUserGoa2SampleUserOK(body *UpdateUserResponseBody) *usersviews.Goa2SampleUserView {
	v := &usersviews.Goa2SampleUserView{
		ID:    body.ID,
		Name:  body.Name,
		Email: body.Email,
	}

	return v
}

// ValidateGoa2SampleUserResponse runs the validations defined on
// Goa2-SampleUserResponse
func ValidateGoa2SampleUserResponse(body *Goa2SampleUserResponse) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.ID != nil {
		if utf8.RuneCountInString(*body.ID) < 28 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.id", *body.ID, utf8.RuneCountInString(*body.ID), 28, true))
		}
	}
	if body.ID != nil {
		if utf8.RuneCountInString(*body.ID) > 28 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.id", *body.ID, utf8.RuneCountInString(*body.ID), 28, false))
		}
	}
	return
}
