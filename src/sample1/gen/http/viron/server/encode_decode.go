// Code generated by goa v3.2.6, DO NOT EDIT.
//
// Viron HTTP server encoders and decoders
//
// Command:
// $ goa gen sample1/design

package server

import (
	"context"
	"net/http"
	vironviews "sample1/gen/viron/views"

	goahttp "goa.design/goa/v3/http"
)

// EncodeAuthtypeResponse returns an encoder for responses returned by the
// Viron authtype endpoint.
func EncodeAuthtypeResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(vironviews.VironAuthtypeCollection)
		enc := encoder(ctx, w)
		body := NewVironAuthtypeResponseCollection(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// EncodeVironMenuEndpointResponse returns an encoder for responses returned by
// the Viron viron_menu endpoint.
func EncodeVironMenuEndpointResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*vironviews.VironMenu)
		enc := encoder(ctx, w)
		body := NewVironMenuResponseBody(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// marshalVironviewsVironAuthtypeViewToVironAuthtypeResponse builds a value of
// type *VironAuthtypeResponse from a value of type
// *vironviews.VironAuthtypeView.
func marshalVironviewsVironAuthtypeViewToVironAuthtypeResponse(v *vironviews.VironAuthtypeView) *VironAuthtypeResponse {
	res := &VironAuthtypeResponse{
		Type:     *v.Type,
		Provider: *v.Provider,
		URL:      *v.URL,
		Method:   *v.Method,
	}

	return res
}

// marshalVironviewsVironPageViewToVironPageResponseBody builds a value of type
// *VironPageResponseBody from a value of type *vironviews.VironPageView.
func marshalVironviewsVironPageViewToVironPageResponseBody(v *vironviews.VironPageView) *VironPageResponseBody {
	res := &VironPageResponseBody{
		ID:      *v.ID,
		Name:    *v.Name,
		Section: *v.Section,
		Group:   v.Group,
	}
	if v.Components != nil {
		res.Components = make([]*VironComponentResponseBody, len(v.Components))
		for i, val := range v.Components {
			res.Components[i] = marshalVironviewsVironComponentViewToVironComponentResponseBody(val)
		}
	}

	return res
}

// marshalVironviewsVironComponentViewToVironComponentResponseBody builds a
// value of type *VironComponentResponseBody from a value of type
// *vironviews.VironComponentView.
func marshalVironviewsVironComponentViewToVironComponentResponseBody(v *vironviews.VironComponentView) *VironComponentResponseBody {
	res := &VironComponentResponseBody{
		Name:           *v.Name,
		Style:          *v.Style,
		Unit:           v.Unit,
		Pagination:     v.Pagination,
		Primary:        v.Primary,
		AutoRefreshSec: v.AutoRefreshSec,
	}
	if v.Actions != nil {
		res.Actions = make([]string, len(v.Actions))
		for i, val := range v.Actions {
			res.Actions[i] = val
		}
	}
	if v.API != nil {
		res.API = marshalVironviewsVironAPIViewToVironAPIResponseBody(v.API)
	}
	if v.TableLabels != nil {
		res.TableLabels = make([]string, len(v.TableLabels))
		for i, val := range v.TableLabels {
			res.TableLabels[i] = val
		}
	}
	if v.Query != nil {
		res.Query = make([]*VironQueryResponseBody, len(v.Query))
		for i, val := range v.Query {
			res.Query[i] = marshalVironviewsVironQueryViewToVironQueryResponseBody(val)
		}
	}

	return res
}

// marshalVironviewsVironAPIViewToVironAPIResponseBody builds a value of type
// *VironAPIResponseBody from a value of type *vironviews.VironAPIView.
func marshalVironviewsVironAPIViewToVironAPIResponseBody(v *vironviews.VironAPIView) *VironAPIResponseBody {
	res := &VironAPIResponseBody{
		Method: *v.Method,
		Path:   *v.Path,
	}

	return res
}

// marshalVironviewsVironQueryViewToVironQueryResponseBody builds a value of
// type *VironQueryResponseBody from a value of type *vironviews.VironQueryView.
func marshalVironviewsVironQueryViewToVironQueryResponseBody(v *vironviews.VironQueryView) *VironQueryResponseBody {
	if v == nil {
		return nil
	}
	res := &VironQueryResponseBody{
		Key:  *v.Key,
		Type: *v.Type,
	}

	return res
}
