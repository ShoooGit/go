// Code generated by goa v3.2.6, DO NOT EDIT.
//
// Viron client HTTP transport
//
// Command:
// $ goa gen sample1/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the Viron service endpoint HTTP clients.
type Client struct {
	// Authtype Doer is the HTTP client used to make requests to the authtype
	// endpoint.
	AuthtypeDoer goahttp.Doer

	// VironMenuEndpoint Doer is the HTTP client used to make requests to the
	// viron_menu endpoint.
	VironMenuEndpointDoer goahttp.Doer

	// CORS Doer is the HTTP client used to make requests to the  endpoint.
	CORSDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the Viron service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		AuthtypeDoer:          doer,
		VironMenuEndpointDoer: doer,
		CORSDoer:              doer,
		RestoreResponseBody:   restoreBody,
		scheme:                scheme,
		host:                  host,
		decoder:               dec,
		encoder:               enc,
	}
}

// Authtype returns an endpoint that makes HTTP requests to the Viron service
// authtype server.
func (c *Client) Authtype() goa.Endpoint {
	var (
		decodeResponse = DecodeAuthtypeResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildAuthtypeRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.AuthtypeDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("Viron", "authtype", err)
		}
		return decodeResponse(resp)
	}
}

// VironMenuEndpoint returns an endpoint that makes HTTP requests to the Viron
// service viron_menu server.
func (c *Client) VironMenuEndpoint() goa.Endpoint {
	var (
		decodeResponse = DecodeVironMenuEndpointResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildVironMenuEndpointRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.VironMenuEndpointDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("Viron", "viron_menu", err)
		}
		return decodeResponse(resp)
	}
}
