// Code generated by goa v3.2.6, DO NOT EDIT.
//
// Viron HTTP client encoders and decoders
//
// Command:
// $ goa gen sample1/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	viron "sample1/gen/viron"
	vironviews "sample1/gen/viron/views"

	goahttp "goa.design/goa/v3/http"
)

// BuildAuthtypeRequest instantiates a HTTP request object with method and path
// set to call the "Viron" service "authtype" endpoint
func (c *Client) BuildAuthtypeRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: AuthtypeVironPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Viron", "authtype", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeAuthtypeResponse returns a decoder for responses returned by the Viron
// authtype endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeAuthtypeResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body AuthtypeResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Viron", "authtype", err)
			}
			p := NewAuthtypeVironAuthtypeCollectionOK(body)
			view := "default"
			vres := vironviews.VironAuthtypeCollection{Projected: p, View: view}
			if err = vironviews.ValidateVironAuthtypeCollection(vres); err != nil {
				return nil, goahttp.ErrValidationError("Viron", "authtype", err)
			}
			res := viron.NewVironAuthtypeCollection(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Viron", "authtype", resp.StatusCode, string(body))
		}
	}
}

// BuildVironMenuEndpointRequest instantiates a HTTP request object with method
// and path set to call the "Viron" service "viron_menu" endpoint
func (c *Client) BuildVironMenuEndpointRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: VironMenuEndpointVironPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Viron", "viron_menu", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeVironMenuEndpointResponse returns a decoder for responses returned by
// the Viron viron_menu endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeVironMenuEndpointResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body VironMenuResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Viron", "viron_menu", err)
			}
			p := NewVironMenuViewOK(&body)
			view := "default"
			vres := &vironviews.VironMenu{Projected: p, View: view}
			if err = vironviews.ValidateVironMenu(vres); err != nil {
				return nil, goahttp.ErrValidationError("Viron", "viron_menu", err)
			}
			res := viron.NewVironMenu(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Viron", "viron_menu", resp.StatusCode, string(body))
		}
	}
}

// unmarshalVironAuthtypeResponseToVironviewsVironAuthtypeView builds a value
// of type *vironviews.VironAuthtypeView from a value of type
// *VironAuthtypeResponse.
func unmarshalVironAuthtypeResponseToVironviewsVironAuthtypeView(v *VironAuthtypeResponse) *vironviews.VironAuthtypeView {
	res := &vironviews.VironAuthtypeView{
		Type:     v.Type,
		Provider: v.Provider,
		URL:      v.URL,
		Method:   v.Method,
	}

	return res
}

// unmarshalVironPageResponseBodyToVironviewsVironPageView builds a value of
// type *vironviews.VironPageView from a value of type *VironPageResponseBody.
func unmarshalVironPageResponseBodyToVironviewsVironPageView(v *VironPageResponseBody) *vironviews.VironPageView {
	res := &vironviews.VironPageView{
		ID:      v.ID,
		Name:    v.Name,
		Section: v.Section,
		Group:   v.Group,
	}
	res.Components = make([]*vironviews.VironComponentView, len(v.Components))
	for i, val := range v.Components {
		res.Components[i] = unmarshalVironComponentResponseBodyToVironviewsVironComponentView(val)
	}

	return res
}

// unmarshalVironComponentResponseBodyToVironviewsVironComponentView builds a
// value of type *vironviews.VironComponentView from a value of type
// *VironComponentResponseBody.
func unmarshalVironComponentResponseBodyToVironviewsVironComponentView(v *VironComponentResponseBody) *vironviews.VironComponentView {
	res := &vironviews.VironComponentView{
		Name:           v.Name,
		Style:          v.Style,
		Unit:           v.Unit,
		Pagination:     v.Pagination,
		Primary:        v.Primary,
		AutoRefreshSec: v.AutoRefreshSec,
	}
	if v.Actions != nil {
		res.Actions = make([]string, len(v.Actions))
		for i, val := range v.Actions {
			res.Actions[i] = val
		}
	}
	res.API = unmarshalVironAPIResponseBodyToVironviewsVironAPIView(v.API)
	if v.TableLabels != nil {
		res.TableLabels = make([]string, len(v.TableLabels))
		for i, val := range v.TableLabels {
			res.TableLabels[i] = val
		}
	}
	if v.Query != nil {
		res.Query = make([]*vironviews.VironQueryView, len(v.Query))
		for i, val := range v.Query {
			res.Query[i] = unmarshalVironQueryResponseBodyToVironviewsVironQueryView(val)
		}
	}

	return res
}

// unmarshalVironAPIResponseBodyToVironviewsVironAPIView builds a value of type
// *vironviews.VironAPIView from a value of type *VironAPIResponseBody.
func unmarshalVironAPIResponseBodyToVironviewsVironAPIView(v *VironAPIResponseBody) *vironviews.VironAPIView {
	res := &vironviews.VironAPIView{
		Method: v.Method,
		Path:   v.Path,
	}

	return res
}

// unmarshalVironQueryResponseBodyToVironviewsVironQueryView builds a value of
// type *vironviews.VironQueryView from a value of type *VironQueryResponseBody.
func unmarshalVironQueryResponseBodyToVironviewsVironQueryView(v *VironQueryResponseBody) *vironviews.VironQueryView {
	if v == nil {
		return nil
	}
	res := &vironviews.VironQueryView{
		Key:  v.Key,
		Type: v.Type,
	}

	return res
}

// unmarshalVironSectionResponseBodyToVironviewsVironSectionView builds a value
// of type *vironviews.VironSectionView from a value of type
// *VironSectionResponseBody.
func unmarshalVironSectionResponseBodyToVironviewsVironSectionView(v *VironSectionResponseBody) *vironviews.VironSectionView {
	if v == nil {
		return nil
	}
	res := &vironviews.VironSectionView{
		ID:    v.ID,
		Label: v.Label,
	}

	return res
}
