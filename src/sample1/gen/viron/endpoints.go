// Code generated by goa v3.2.6, DO NOT EDIT.
//
// Viron endpoints
//
// Command:
// $ goa gen sample1/design

package viron

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "Viron" service endpoints.
type Endpoints struct {
	Authtype          goa.Endpoint
	VironMenuEndpoint goa.Endpoint
}

// NewEndpoints wraps the methods of the "Viron" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		Authtype:          NewAuthtypeEndpoint(s),
		VironMenuEndpoint: NewVironMenuEndpointEndpoint(s),
	}
}

// Use applies the given middleware to all the "Viron" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Authtype = m(e.Authtype)
	e.VironMenuEndpoint = m(e.VironMenuEndpoint)
}

// NewAuthtypeEndpoint returns an endpoint function that calls the method
// "authtype" of service "Viron".
func NewAuthtypeEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		res, err := s.Authtype(ctx)
		if err != nil {
			return nil, err
		}
		vres := NewViewedVironAuthtypeCollection(res, "default")
		return vres, nil
	}
}

// NewVironMenuEndpointEndpoint returns an endpoint function that calls the
// method "viron_menu" of service "Viron".
func NewVironMenuEndpointEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		res, err := s.VironMenuEndpoint(ctx)
		if err != nil {
			return nil, err
		}
		vres := NewViewedVironMenu(res, "default")
		return vres, nil
	}
}
