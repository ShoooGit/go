// Code generated by goa v3.2.6, DO NOT EDIT.
//
// Ha service
//
// Command:
// $ goa gen sample1/design

package ha

import (
	"context"
	haviews "sample1/gen/ha/views"
)

// ha serves.
type Service interface {
	// decied on a theme and card
	DrawCard(context.Context) (res Goa3SampleUserCollection, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "Ha"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [1]string{"draw card"}

// Goa3SampleUserCollection is the result type of the Ha service draw card
// method.
type Goa3SampleUserCollection []*Goa3SampleUser

// Ha Response
type Goa3SampleUser struct {
	// theme of game
	Theme string
	// card of abc
	Card string
}

// NewGoa3SampleUserCollection initializes result type Goa3SampleUserCollection
// from viewed result type Goa3SampleUserCollection.
func NewGoa3SampleUserCollection(vres haviews.Goa3SampleUserCollection) Goa3SampleUserCollection {
	return newGoa3SampleUserCollection(vres.Projected)
}

// NewViewedGoa3SampleUserCollection initializes viewed result type
// Goa3SampleUserCollection from result type Goa3SampleUserCollection using the
// given view.
func NewViewedGoa3SampleUserCollection(res Goa3SampleUserCollection, view string) haviews.Goa3SampleUserCollection {
	p := newGoa3SampleUserCollectionView(res)
	return haviews.Goa3SampleUserCollection{Projected: p, View: "default"}
}

// newGoa3SampleUserCollection converts projected type Goa3SampleUserCollection
// to service type Goa3SampleUserCollection.
func newGoa3SampleUserCollection(vres haviews.Goa3SampleUserCollectionView) Goa3SampleUserCollection {
	res := make(Goa3SampleUserCollection, len(vres))
	for i, n := range vres {
		res[i] = newGoa3SampleUser(n)
	}
	return res
}

// newGoa3SampleUserCollectionView projects result type
// Goa3SampleUserCollection to projected type Goa3SampleUserCollectionView
// using the "default" view.
func newGoa3SampleUserCollectionView(res Goa3SampleUserCollection) haviews.Goa3SampleUserCollectionView {
	vres := make(haviews.Goa3SampleUserCollectionView, len(res))
	for i, n := range res {
		vres[i] = newGoa3SampleUserView(n)
	}
	return vres
}

// newGoa3SampleUser converts projected type Goa3SampleUser to service type
// Goa3SampleUser.
func newGoa3SampleUser(vres *haviews.Goa3SampleUserView) *Goa3SampleUser {
	res := &Goa3SampleUser{}
	if vres.Theme != nil {
		res.Theme = *vres.Theme
	}
	if vres.Card != nil {
		res.Card = *vres.Card
	}
	return res
}

// newGoa3SampleUserView projects result type Goa3SampleUser to projected type
// Goa3SampleUserView using the "default" view.
func newGoa3SampleUserView(res *Goa3SampleUser) *haviews.Goa3SampleUserView {
	vres := &haviews.Goa3SampleUserView{
		Theme: &res.Theme,
		Card:  &res.Card,
	}
	return vres
}
