// Code generated by goa v3.2.6, DO NOT EDIT.
//
// Ha views
//
// Command:
// $ goa gen sample1/design

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// Goa3SampleHaCollection is the viewed result type that is projected based on
// a view.
type Goa3SampleHaCollection struct {
	// Type to project
	Projected Goa3SampleHaCollectionView
	// View to render
	View string
}

// Goa3SampleHaCollectionView is a type that runs validations on a projected
// type.
type Goa3SampleHaCollectionView []*Goa3SampleHaView

// Goa3SampleHaView is a type that runs validations on a projected type.
type Goa3SampleHaView struct {
	// theme of game
	Theme *string
	// card of abc
	Card *string
}

var (
	// Goa3SampleHaCollectionMap is a map of attribute names in result type
	// Goa3SampleHaCollection indexed by view name.
	Goa3SampleHaCollectionMap = map[string][]string{
		"default": []string{
			"theme",
			"card",
		},
	}
	// Goa3SampleHaMap is a map of attribute names in result type Goa3SampleHa
	// indexed by view name.
	Goa3SampleHaMap = map[string][]string{
		"default": []string{
			"theme",
			"card",
		},
	}
)

// ValidateGoa3SampleHaCollection runs the validations defined on the viewed
// result type Goa3SampleHaCollection.
func ValidateGoa3SampleHaCollection(result Goa3SampleHaCollection) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateGoa3SampleHaCollectionView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateGoa3SampleHaCollectionView runs the validations defined on
// Goa3SampleHaCollectionView using the "default" view.
func ValidateGoa3SampleHaCollectionView(result Goa3SampleHaCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateGoa3SampleHaView(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateGoa3SampleHaView runs the validations defined on Goa3SampleHaView
// using the "default" view.
func ValidateGoa3SampleHaView(result *Goa3SampleHaView) (err error) {
	if result.Theme == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("theme", "result"))
	}
	if result.Card == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("card", "result"))
	}
	return
}
