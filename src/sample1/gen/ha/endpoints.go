// Code generated by goa v3.2.6, DO NOT EDIT.
//
// Ha endpoints
//
// Command:
// $ goa gen sample1/design

package ha

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "Ha" service endpoints.
type Endpoints struct {
	DrawCard goa.Endpoint
}

// NewEndpoints wraps the methods of the "Ha" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		DrawCard: NewDrawCardEndpoint(s),
	}
}

// Use applies the given middleware to all the "Ha" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.DrawCard = m(e.DrawCard)
}

// NewDrawCardEndpoint returns an endpoint function that calls the method "draw
// card" of service "Ha".
func NewDrawCardEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		res, err := s.DrawCard(ctx)
		if err != nil {
			return nil, err
		}
		vres := NewViewedGoa3SampleUserCollection(res, "default")
		return vres, nil
	}
}
