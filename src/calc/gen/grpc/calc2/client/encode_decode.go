// Code generated by goa v3.2.6, DO NOT EDIT.
//
// calc2 gRPC client encoders and decoders
//
// Command:
// $ goa gen calc/design

package client

import (
	calc2 "calc/gen/calc2"
	calc2pb "calc/gen/grpc/calc2/pb"
	"context"

	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

// BuildMinusFunc builds the remote method to invoke for "calc2" service
// "minus" endpoint.
func BuildMinusFunc(grpccli calc2pb.Calc2Client, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Minus(ctx, reqpb.(*calc2pb.MinusRequest), opts...)
		}
		return grpccli.Minus(ctx, &calc2pb.MinusRequest{}, opts...)
	}
}

// EncodeMinusRequest encodes requests sent to calc2 minus endpoint.
func EncodeMinusRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*calc2.MinusPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("calc2", "minus", "*calc2.MinusPayload", v)
	}
	return NewMinusRequest(payload), nil
}

// DecodeMinusResponse decodes responses from the calc2 minus endpoint.
func DecodeMinusResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*calc2pb.MinusResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("calc2", "minus", "*calc2pb.MinusResponse", v)
	}
	res := NewMinusResult(message)
	return res, nil
}
